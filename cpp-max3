// max3 returns the max of 3 numbers

// start with int only, the first step:
/*
int max3(int a, int b, int c) {
        int max = a;

        if (max < b)
		max = b;
        if (max < c)
		max = c;

        return max;
}
*/

// let's reuse the logic of max2
// int max2(int a, int b) { return a>b?a:b; }
// int max3(int a, int b, int c) { return max2(max2(a,b), c); }

// c-style #define is so flexible, but a double-edged sword (side effect)
// #define max2(a,b)    a>=b?a:b
// #define max3(a,b,c)  (max2(max2(a, b), c))

// let's do other types, start to wonder about the unwanted max2
// auto max2(auto a, auto b) { return a>b?a:b; }
// auto max3(auto a, auto b, auto c) { return max2(max2(a,b),c); }

// the ultimate best one with lambda
/*
auto max3 = [](auto a, auto b, auto c) {
        auto max2 = [](auto a, auto b) { return a>b?a:b; };
        return max2(max2(a,b),c);
};
*/

// back to the first step, but fancy one
auto max3(auto a, auto b, auto c) {
        auto max = (a>b)?a:b;
        return (max>c)?max:c; 
}


#include <iostream>
using namespace std;

int main() {
        auto a = 6;
        cout << max3(3, 5, a++) << endl;
        cout << a << endl;
        cout << max3(a++, 1, 4) << endl;
        cout << a << endl;
        cout << max3(3, a++, 1) << endl;
        cout << a << endl;
        return 0;
}
